FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# PWP
0
# Group Link Relations

## create-plan

Create new mealplan

## delete

Delete the resource

## add-meal

Add new meal to mealplan

## add-recipe

Add new recipe to recipe collection

## add-ingredient

Add new ingredient to recipe

## add-step

Add new step to a recipe

# Group Profiles

## Recipe profile

### Link Relations

This section lists all possible link relations associated with albums; not all of them are necessarily present on each resource type. The following link relations from the mumeta namespace are used:

 * [add-ingredient](reference/link-relations/add-ingredient)
 * [add-step](reference/link-relations/add-step)
 * [add-recipe](reference/link-relations/add-recipe)
 * [delete](reference/link-relations/delete)

The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * author
 * collection
 * edit
 * profile
 * self
 
 
### Semantic Descriptors

#### Data Type Recipe

 * `id`: Unique id of the recipe. Mandatory.
 * `name`: Name of the recipe. Mandatory.
 * `description`: Description of the recipe. Optional.
 * `recipeYield`: The ammount of servings provided by the recipe. Mandatory
 * `cookTime`: The time required to cook the recipe. Optional.
 * `recipeCategory`: The category of the recipe. Optional.
 * `author`: Name of the creator of the recipe. Mandatory.
 * `datePublished`: The date when the recipe was published in following format: (YYYY-MM-DD). Optional
 * `nutrition_information_id`: Id of the nutrition information of the recipe. Mandatory.
 

## Meal profile

### Link Relations

This section lists all possible link relations associated with albums; not all of them are necessarily present on each resource type. The following link relations from the mumeta namespace are used:

 * [add-ingredient](reference/link-relations/add-ingredient)
 * [add-step](reference/link-relations/add-step)
 * [add-meal](reference/link-relations/add-meal)
 * [add-recipe](reference/link-relations/add-recipe)
 * [delete](reference/link-relations/delete)

The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * author
 * collection
 * edit
 * profile
 * self
 
 
### Semantic Descriptors

#### Data Type Meal

 * `id`: Unique id of the meal. Mandatory.
 * `name`: Name of the meal. Mandatory.
 * `description`: Description of the meal. Optional.
 * `author`: Name of the creator of the meal. Mandatory.
 * `datePublished`: The date when the recipe was published in following format: (YYYY-MM-DD). Optional
 * `type`: Type of the recipe (breakfast, lunch or dinner). Mandatory.
 
#Group Recipes

## Recipes Collection [/api/recipes/?sortby={field}]

+ Parameters

    + field (string, optional) - Field to use for sorting
    
        + Default: `name`
        + Members
        
            + `name`
            + `recipeCategory`
            + `author`
            + `datePublished`

### List All Recipes [GET]


Get a list of all recipes known to the API.

+ Relation: collection
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
                "@namespaces": {
                    "dontstarve": {
                        "name": "/dontstarve/link-relations#"
                    }
                },
                "@controls": {
                    "self": {
                        "href": "/api/recipes/"
                    },
                    "mumeta:artists-all": {
                        "href": "/api/artists/",
                        "title": "All artists"
                    },
                    "mumeta:albums-va": {
                        "href": "/api/artists/VA/albums/",
                        "title": "All VA albums"
                    }
                },
                "items": [
                    {
                        "title": "Hello World",
                        "artist": "Scandal",
                        "@controls": {
                            "self": {
                                "href": "/api/artists/scandal/Hello World/"
                            }, 
                            "profile": {
                                "href": "/profiles/album/"
                            }
                        },
                    }, 
                    {
                        "title": "Thorns vs Emperor",
                        "artist": "VA",
                        "@controls": {
                            "self": {
                                "href": "/api/artists/VA/Thorns vs Emperor/"
                            },
                            "profile": {
                                "href": "/profiles/album/"
                            }
                        }
                    }
                ]
            }

### Create a New Recipe [POST]

You may create new recipe using this action.

+ Relation: add-recipe
+ Request (application/json)


    + Headers

            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "name": "chickensoup",
                "description": "nice soup",
                "recipeYield": "9 servings",
                "cookTime": "5 hours",
                "recipeCategory": "soup",
                "author": "Ville",
                "datePubished": "2015-10-23"
            }

+ Response 201

    + Headers
    
            Location: /api/recipes

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            {
                "resource_url": "/api/artists/scandal/albums/",
                "@error": {
                    "@message": "Invalid JSON document",
                    "@messages": [                    
                        "'release' is a required property
                        
                        Failed validating 'required' in schema:
                        {'properties': {'discs': {'default': 1,
                        'description': 'Number of discs',
                        'type': 'integer'},
                        'genre': {'description': \"Album's genre(s)\",
                        'type': 'string'},
                        'release': {'description': 'Release date',
                        'pattern': '^[0-9]{4}(?:-[01][0-9])?(?:-[0-3][0-9])?$',
                        'type': 'string'},
                        'title': {'description': 'Album title',
                        'type': 'string'}},
                        'required': ['title', 'release'],
                        'type': 'object'}
                        
                        On instance:
                        {'title': 'Best Scandal'}"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to add an album for an artist that doesn't exist.

    + Body
    
            {
                "resource_url": "/api/artists/hemuli/albums/",
                "@error": {
                    "@message": "Artist not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 409 (application/vnd.mason+json)

    The client is trying to add an album with a title that's already used by another album for the same artist.

    + Body
    
            {
                "resource_url": "/api/artists/scandal/albums/",
                "@error": {
                    "@message": "Already exists",
                    "@messages": [
                        "Artist 'scandal' already has album with title 'Hello World'"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
            

+ Response 415 (application/vnd.mason+json)

    The client did not use the proper content type, or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/artists/scandal/albums/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

## Recipes [/recipes/{recipe}/]
+ Parameters

    + recipe (string) - recipe's unique name (unique_name)

### Recipe information [GET]

Get the album representation.

+ Relation: self
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

## Ingredient [/paska]

## Step [/step]
  
#Group Meals

## Meals Collection  [/meals]

### List All Meals [GET]

+ Response 200 (application/json)

        [
        ]

### Create a New Meal [POST]

+ Request (application/json)

        [
        ]

+ Response 201 (application/json)
    
    + Headers
        
        Location: /meals/2
        
    + Body
        
        [
        ]