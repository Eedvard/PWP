FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# PWP
0
# Group Link Relations

## delete

Delete the resource

## add-recipe

Add new recipe to recipe collection

## add-ingredient

Add new ingredient to recipe

## add-step

Add new step to a recipe

# Group Profiles

## Recipe profile

### Link Relations

This section lists all possible link relations associated with albums; not all of them are necessarily present on each resource type. The following link relations from the mumeta namespace are used:

 * [add-ingredient](reference/link-relations/add-ingredient)
 * [add-step](reference/link-relations/add-step)
 * [add-recipe](reference/link-relations/add-recipe)
 * [delete](reference/link-relations/delete)

The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * author
 * collection
 * edit
 * profile
 * self
 
 
### Semantic Descriptors

#### Data Type Recipe

 * `id`: Unique id of the recipe. Mandatory.
 * `name`: Name of the recipe. Mandatory.
 * `description`: Description of the recipe. Optional.
 * `recipeYield`: The ammount of servings provided by the recipe. Mandatory
 * `cookTime`: The time required to cook the recipe. Optional.
 * `recipeCategory`: The category of the recipe. Optional.
 * `author`: Name of the creator of the recipe. Mandatory.
 * `datePublished`: The date when the recipe was published in following format: (YYYY-MM-DD). Optional
 * `nutrition_information_id`: Id of the nutrition information of the recipe. Mandatory.
 


## Users profile

### Link Relations

All link relations related to users.

 * [delete](reference/link-relations/delete)
 * [update](reference/link-relations/update)


The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * author
 * collection
 * edit
 * self
 
 
### Semantic Descriptors

#### Data Type Recipe

 * `id`: Unique id of the user. Mandatory.
 * `username`: Name of the user. Mandatory.
 Users

#Group Recipes

## Recipes Collection [/api/recipes/?sortby={field}]

+ Parameters

    + field (string, optional) - Field to use for sorting
    
        + Default: `name`
        + Members
        
            + `name`
            + `recipeCategory`
            + `author`
            + `datePublished`

### List All Recipes [GET]


Get a list of all recipes known to the API.

+ Relation: collection
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
                "@namespaces": {
                    "dontstarve": {
                        "name": "/dontstarve/link-relations#"
                    }
                },
                "@controls": {
                    "self": {
                        "href": "/api/recipes/"
                    },
                    "dontstarve:recipes-all": {
                        "href": "/api/recipes/",
                        "title": "All recipes"
                    },
                },
                "items": [
                    {
                        "name": "Mashed Potatoes",
                        "recipeCategory": "Dinner",
                        "author": "Erkki Esimerkki",
                        "datePublished": "9.3.2019",
                        "@controls": {
                            "self": {
                                "href": "/api/recipes/Mashed Potatoes/"
                            }, 
                            "profile": {
                                "href": "/recipe/"
                            }
                        },
                    }, 
                    {
                        "title": "Meat Sauce",
                        "recipeCategory": "Dinner",
                        "author": "Seppo Soppa",
                        "datePublished": "3.9.2018",
                        "@controls": {
                            "self": {
                                "href": "/api/recipes/Meat Sauce/"
                            },
                            "profile": {
                                "href": "/recipe/"
                            }
                        }
                    }
                ]
            }

### Create a New Recipe [POST]

You may create new recipe using this action.

+ Relation: add-recipe
+ Request (application/json)


    + Headers

            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "id": "1"
                "name": "chickensoup",
                "description": "nice soup",
                "recipeYield": "9 servings",
                "cookTime": "5 hours",
                "recipeCategory": "soup",
                "author": "Ville",
                "datePublished": "2015-10-23"
            }

+ Response 201

    + Headers
    
            Location: /api/recipes/1/

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            {
                "resource_url": "/api/recipes/",
                "@error": {
                    "@message": "Invalid JSON document",
                    "@messages": [                    
                        "'release' is a required property
                        
                        Failed validating 'required' in schema:
                        {'properties': 
                        {'id': {'default': 1,
                        'description': 'recipe_id',
                        'type': 'integer'},
                        'name': {'description': \"Recipe's name\",
                        'type': 'string'},
                        'description': {'description': 'Recipe's description',
                        'type': 'string'}},
                        'recipeYield': {'description': 'The ammount of servings',
                        'type': 'string'}},
                        'recipeCategory': {'description': 'Category of the recipe',
                        'type': 'string'}},
                        'author': {'description': 'author of the recipe',
                        'type': 'string'}},
                        'datePublished': {'description': 'Release date',
                        'pattern': '^[0-9]{4}(?:-[01][0-9])?(?:-[0-3][0-9])?$',
                        'type': 'string'},
                        
                        On instance:
                        {'id': '1'}"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)


    + Body
    
            {
                "resource_url": "/api/recipes/2",
                "@error": {
                    "@message": "Recipe not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 409 (application/vnd.mason+json)


    + Body
    
            {
                "resource_url": "/api/recipes/1/",
                "@error": {
                    "@message": "Already exists",
                    "@messages": [
                        "Recipe with that id already exists"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
            

+ Response 415 (application/vnd.mason+json)

    The client did not use the proper content type, or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/recipes/1/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

## Recipe [/api/recipes/{id}/]
+ Parameters

    + id (integer) - recipe's unique id (id)

### Recipe information [GET]

Get the album representation.

+ Relation: self
+ Relation: collection
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
                "@namespaces": {
                    "dontstarve": {
                        "name": "/dontstarve/link-relations#"
                    }
                },
                "@controls": {
                    "self": {
                        "href": "/api/recipes/"
                    },
                    "dontstarve:recipes-all": {
                        "href": "/api/recipes/",
                        "title": "All recipes"
                    },
                },
                "items": [
                    {
                        "name": "Mashed Potatoes",
                        "recipeCategory": "Dinner",
                        "author": "Erkki Esimerkki",
                        "datePublished": "9.3.2019",
                        "@controls": {
                            "self": {
                                "href": "/api/recipes/Mashed Potatoes/"
                            }, 
                            "profile": {
                                "href": "/recipe/"
                            }
                        },
                    }, 
                    {
                        "title": "Meat Sauce",
                        "recipeCategory": "Dinner",
                        "author": "Seppo Soppa",
                        "datePublished": "3.9.2018",
                        "@controls": {
                            "self": {
                                "href": "/api/recipes/Meat Sauce/"
                            },
                            "profile": {
                                "href": "/recipe/"
                            }
                        }
                    }
                ]
            }

### Edit Recipe information [PUT]

+ Relation: edit
+ Request (application/json)

    + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "id": "1"
                "name": "chickensoup",
                "description": "nice soup",
                "recipeYield": "9 servings",
                "cookTime": "5 hours",
                "recipeCategory": "soup",
                "author": "Ville",
                "datePublished": "2015-10-23"
            }
        
+ Response 204

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            {
                "resource_url": "/api/recipes/1/",
                "@error": {
                    "@message": "Invalid date format",
                    "@messages": [
                        "Release date must be written in ISO format (YYYY-MM-DD)"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    Trying to edit recipe that does not exist

    + Body
    
            {
                "resource_url": "/api/recipes/2/",
                "@error": {
                    "@message": "Recipe not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
            
+ Response 409 (application/vnd.mason+json)

    The client is trying to change the album's title to a one that is already in use for the artist.

    + Body
    
            {
                "resource_url": "/api/recipes/1/",
                "@error": {
                    "@message": "Recipe id in use",
                    "@messages": [
                        "Recipe exists with the same id'"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/recipes/1/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

### Delete Recipe [DELETE]

+ Relation: delete
+ Request

    + Headers
        
            Accept: application/vnd.mason+json
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to delete an recipe that doesn't exist.

    + Body
    
            {
                "resource_url": "/api/recipe/2/",
                "@error": {
                    "@message": "Recipe not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

  

#Group Users

## Users [/api/users/{id}]

+ Parameters

    + id (integer) - user's unique id (id)


### List All Users [GET]

    Get all users in the database.

+ Relation: collection
+ Request

    + Headers
        
            Accept: application/vnd.mason.jason
        
+ Response 200 (application/vnd.mason+json)

 + Body

            {
                "@namespaces": {
                    "dontstarve": {
                        "name": "/dontstarve/link-relations#"
                    }
                },
                "@controls": {
                    "self": {
                        "href": "/api/users/"
                    },
                    "dontstarve:users-all": {
                        "href": "/api/users/",
                        "title": "All users"
                    },
                },
                "items": [
                    {
                        "id": "1",
                        "username": "ErkkiE",

                        "@controls": {
                            "self": {
                                "href": "/api/users/1/"
                            }, 
                            "profile": {
                                "href": "/users/"
                            }
                        },
                    }, 
                    {
                        "id": "2",
                        "author": "SeppoS",
                        "@controls": {
                            "self": {
                                "href": "/api/users/1/"
                            },
                            "profile": {
                                "href": "/users/"
                            }
                        }
                    }
                ]
            }

### Edit User [PUT]

You may create new user using this action.

+ Relation: edit
+ Request (application/json)

 + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "id": "1"
                "name": "ErkkiS",
            }
        
+ Response 204

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            {
                "resource_url": "/api/users/1/",
                "@error": {
                    "@message": "Invalid name format",
                    "@messages": [
                        "Username must not have special characters"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    Trying to edit recipe that does not exist

    + Body
    
            {
                "resource_url": "/api/users/2/",
                "@error": {
                    "@message": "User not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
            
+ Response 409 (application/vnd.mason+json)

    The client is trying to change the album's title to a one that is already in use for the artist.

    + Body
    
            {
                "resource_url": "/api/users/1/",
                "@error": {
                    "@message": "user id in use",
                    "@messages": [
                        "User exists with the same id'"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/users/1/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

### Delete User [DELETE]

+ Relation: delete
+ Request

    + Headers
        
            Accept: application/vnd.mason+json
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to delete a user that doesn't exist.

    + Body
    
            {
                "resource_url": "/api/user/2/",
                "@error": {
                    "@message": "User not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
            
## Weekly plan [/api/users/{user_id}/plans/{plan_id}]
+ Parameters

    + plan_id (integer) - weekly plan's unique id (id)


### Get Weekly Plans [GET]

+ Relation: collection
+ Request

    + Headers
        
            Accept: application/vnd.mason+jason
        

+ Response 200 (application/vnd.mason+json)

    + Body

            {
                "@namespaces": {
                    "dontstarve": {
                        "name": "/dontstarve/link-relations#"
                    }
                },
                "@controls": {
                    "self": {
                        "href": "/api/users/{user_id}/plans/"
                    },
                    "dontstarve:plans-all": {
                        "href": "/api/users/{user-id}/plans/",
                        "title": "All plans"
                    },
                },
                "items": [
                    {
                        "id": "1",
                        "week": "1",
                        "notes": "Delicious plan",
                        "user_id": "1"

                        "@controls": {
                            "self": {
                                "href": "/api/users/1/plans/1"
                            }, 
                            "profile": {
                                "href": "/users/{user_id}/plans/"
                            }
                        },
                    }, 
                    {
                        "id": "2",
                        "week": "3",
                        "notes": "Spicy plan",
                        "user_id": "2"

                        "@controls": {
                            "self": {
                                "href": "/api/users/2/plans/2"
                            }, 
                            "profile": {
                                "href": "/users/{user_id}/plans/"
                            }
                        }
                    }
                ]
            }
            
### Create a New Plan [POST]

You may create new plan using this action.

+ Relation: add-plan
+ Request (application/json)


    + Headers

            Accept: application/vnd.mason+json
        
    + Body
    
            {
                        "id": "1",
                        "week": "1",
                        "notes": "Delicious plan",
                        "user_id": "1"
            }

+ Response 201

    + Headers
    
            Location: /api/users/{user_id}/plans/

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            {
                "resource_url": "/api/users/{user_id}/plans/",
                "@error": {
                    "@message": "Invalid JSON document",
                    "@messages": [                    
                        "'release' is a required property
                        
                        Failed validating 'required' in schema:
                        {'properties': 
                        {'id': {'default': 1,
                        'description': 'plan id',
                        'type': 'integer'},
                        'week': {'default': 1,
                        'description': 'plan week',
                        'type': 'integer'},
                        'note': {'description': \"Notes\",
                        'type': 'string'},
                        'user_id': {'default': 1,
                        'description': 'user id',
                        'type': 'integer'},
                        On instance:
                        {'id': '1'}"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)


    + Body
    
            {
                "resource_url": "/api/users/{user_id}/plans/2",
                "@error": {
                    "@message": "Plan not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 409 (application/vnd.mason+json)


    + Body
    
            {
                "resource_url": "/api/users/{user_id}/plans/1/",
                "@error": {
                    "@message": "Already exists",
                    "@messages": [
                        "Plan with that id already exists"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
            

+ Response 415 (application/vnd.mason+json)

    The client did not use the proper content type, or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/users/{user_id}/plans/1/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

## Shopping list [/api/users/{user_id}/plans/{plan_id}/shoppinglist/{list_id}]

+ Parameters

    + list_id (integer) - shopping list's unique id (id)

### Get Shopping Lists [GET]

+ Relation: collection
+ Request

    + Headers
        
            Accept: application/vnd.mason+jason
        

+ Response 200 (application/vnd.mason+json)

    + Body

            {
                "@namespaces": {
                    "dontstarve": {
                        "name": "/dontstarve/link-relations#"
                    }
                },
                "@controls": {
                    "self": {
                        "href": "/api/users/{user_id}/plans/{plan_id}/shoppinglist/"
                    },
                    "dontstarve:plans-all": {
                        "href": "/api/users/{user_id}/plans/{plan_id}/shoppinglist/",
                        "title": "All plans"
                    },
                },
                "items": [
                    {
                        "id": "1",
                        "plan_id": "1",
                        "notes": "Potato week",

                        "@controls": {
                            "self": {
                                "href": "/api/users/1/plans/1/shoppinglist/1"
                            }, 
                            "profile": {
                                "href": "/users/{user_id}/plans/{plan_id}/shoppinglist/"
                            }
                        },
                    }, 
                    {
                        "id": "2",
                        "plan_id": "2",
                        "notes": "Soup week",

                        "@controls": {
                            "self": {
                                "href": "/api/users/2/plans/2/shoppinglist/2"
                            }, 
                            "profile": {
                                "href": "/users/{user_id}/plans/{plan_id}/shoppinglist/"
                            }
                        }
                    }
                ]
            }

### Edit Shopping List [PUT]
You may create new user using this action.

+ Relation: edit
+ Request (application/json)

 + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "id": "1"
                "plan_id": "1"
                "week": "1",
                "notes": "notes"
            }
        
+ Response 204

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            {
                "resource_url": "/api/users/1/plan/1/shoppinglist/1/",
                "@error": {
                    "@message": "Invalid notes size",
                    "@messages": [
                        "Too many characters in notes"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    Trying to edit shopping list that does not exist

    + Body
    
            {
                "resource_url": "/api/users/2/plan/2/shoppinglist/2/",
                "@error": {
                    "@message": "Shopping list not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
            
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/users/1/plan/1/shoppinglist/1/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }