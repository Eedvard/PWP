FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# PWP
0
# Group Link Relations

## delete

Delete the resource

## add-recipe

Add new recipe to recipe collection

## add-ingredient

Add new ingredient to recipe

## add-step

Add new step to a recipe

## add-shoppinglist

Add new shopping list

## steps-all

All steps of recipe

## users-all

All users

## recipes-all

All recipes

## ingredients-all

All ingredients of recipe/shopping list

## edit-recipe

Edit the recipe

## edit-ingredient

Edit the ingredient

## edit-step

Edit the step

## edit-shoppinglist

Edit the shopping list



# Group Profiles

## Recipe profile

### Link Relations

 * [recipes-all](reference/link-relations/recipes-all)
 * [add-recipe](reference/link-relations/add-recipe)
 * [ingredients-all](reference/link-relations/ingredients-all)
 * [add-ingredient](reference/link-relations/add-ingredient)
 * [steps-all](reference/link-relations/steps-all)
 * [add-step](reference/link-relations/add-step)

The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * author
 * collection
 * edit
 * profile
 * self
 
 
### Semantic Descriptors

#### Data Type Recipe

 * `id`: Unique id of the recipe. Mandatory.
 * `name`: Name of the recipe. Mandatory.
 * `description`: Description of the recipe. Optional.
 * `recipeYield`: The ammount of servings provided by the recipe. Mandatory
 * `cookTime`: The time required to cook the recipe. Optional.
 * `recipeCategory`: The category of the recipe. Optional.
 * `author`: Name of the creator of the recipe. Mandatory.
 * `datePublished`: The date when the recipe was published in following format: (YYYY-MM-DD). Optional
 * `nutrition_information_id`: Id of the nutrition information of the recipe. Mandatory.
 


## Users profile

### Link Relations

All link relations related to users.

 * [users-all](reference/link-relations/users-all)
 * [add-user](reference/link-relations/add-user)
 * [shoppinglists-all](reference/link-relations/shoppinglists-all)
 * [add-shoppinglist](reference/link-relations/add-shoppinglist)

The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * author
 * collection
 * edit
 * self
 
 
### Semantic Descriptors

#### Data Type Recipe

 * `username`: Name of the user. Mandatory.
 Users

## Shopping list profile

### Link Relations

All link relations related to users.

 * [shoppinglists-all](reference/link-relations/shoppinglists-all)
 * [add-shoppinglist](reference/link-relations/add-shoppinglist)
 * [ingredients-all](reference/link-relations/ingredients-all)
 * [add-ingredient](reference/link-relations/add-ingredient)

The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * author
 * collection
 * edit
 * self
 
 
### Semantic Descriptors

#### Data Type Recipe

 * `notes`: Notes for the shopping list. Mandatory.

 
 ## Steps profile

### Link Relations

All link relations related to users.

 * [recipe_steps-all](reference/link-relations/recipe_steps-all)
 * [add-steps](reference/link-relations/add-steps)

The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * collection
 * edit
 * self
 
 
### Semantic Descriptors

#### Data Type Recipe

 * `step`: Number of the step. Mandatory.
 * `text`: Explanation of the step. Mandatory.
 Users

#Group Recipes

## Recipes Collection [/api/recipes/]

+ Parameters


        + Default: `name`
        + Members
        
            + `name`
            + `recipeCategory`
            + `author`
            + `datePublished`

### List All Recipes [GET]


Get a list of all recipes known to the API.

+ Relation: collection
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
                "items": [
                    {
                        "name": "Mashed Potatoes",
                        "recipeCategory": "Dinner",
                        "author": "Erkki Esimerkki",
                        "datePublished": "9.3.2019",
                        "@controls": {
                            "self": {
                                "href": "/api/recipes/Mashed Potatoes/"
                            }, 
                            "profile": {
                                "href": "/recipe/"
                            }
                        },
                    }, 
                    {
                        "title": "Meat Sauce",
                        "recipeCategory": "Dinner",
                        "author": "Seppo Soppa",
                        "datePublished": "3.9.2018",
                        "@controls": {
                            "self": {
                                "href": "/api/recipes/Meat Sauce/"
                            },
                            "profile": {
                                "href": "/recipe/"
                            }
                        }
                    }
                ],
                "@controls":{
                    "profile:recipes-all":{
                        "method": "GET",
                        "title": "Get all recipes",
                        "href": "/api/recipes/"
                    },
                    "profile:add-recipe":{"method": "POST", "encoding": "json", "title": "Add a new recipe", "schema":{"type": "object",â€¦}
                    }
                    }
                
            }

### Create a New Recipe [POST]

You may create new recipe using this action.

+ Relation: add-recipe
+ Request (application/json)


    + Headers

            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "id": "1"
                "name": "chickensoup",
                "description": "nice soup",
                "recipeYield": "9 servings",
                "cookTime": "5 hours",
                "recipeCategory": "soup",
                "author": "Ville",
                "datePublished": "2015-10-23"
            }

+ Response 204

    + Headers
    
            Location: /api/recipes/1/

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            {
                "resource_url": "/api/recipes/",
                "@error": {
                    "@message": "Invalid JSON document",
                    "@messages": [                    
                        "'release' is a required property
                        
                        Failed validating 'required' in schema:
                        {'properties': 
                        {'id': {'default': 1,
                        'description': 'recipe_id',
                        'type': 'integer'},
                        'name': {'description': \"Recipe's name\",
                        'type': 'string'},
                        'description': {'description': 'Recipe's description',
                        'type': 'string'}},
                        'recipeYield': {'description': 'The ammount of servings',
                        'type': 'string'}},
                        'recipeCategory': {'description': 'Category of the recipe',
                        'type': 'string'}},
                        'author': {'description': 'author of the recipe',
                        'type': 'string'}},
                        'datePublished': {'description': 'Release date',
                        'pattern': '^[0-9]{4}(?:-[01][0-9])?(?:-[0-3][0-9])?$',
                        'type': 'string'},
                        
                        On instance:
                        {'id': '1'}"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)


    + Body
    
            {
                "resource_url": "/api/recipes/2",
                "@error": {
                    "@message": "Recipe not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 409 (application/vnd.mason+json)


    + Body
    
            {
                "resource_url": "/api/recipes/1/",
                "@error": {
                    "@message": "Already exists",
                    "@messages": [
                        "Recipe with that id already exists"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
            

+ Response 415 (application/vnd.mason+json)

    The client did not use the proper content type, or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/recipes/1/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

## Recipe [/api/recipes/{id}/]
+ Parameters

    + id (integer) - recipe's unique id (id)

### Recipe information [GET]

Get the recipe representation.

+ Relation: self
+ Relation: collection
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
            "name": "Mashed Potatoes",
            "description": "Dinner",
            "recipeYield": "10",
            "cookTime": "1 hours",
            "recipeCategory": "Dinner",
            "author": "Erkki Esimerkki",
            "datePublished": "9.3.2019,
            "calories": 0,
            "carbohydrateContent": 0,
            "cholesterolContent": 0,
            "fatContent": 0,
            "fiberContent": 0,
            "proteinContent": 0,
            "saturatedFatContent": 0,
            "sodiumContent": 0,
            "sugarContent": 0,
            "transFatContent": 0,
            "unsaturatedFatContent": 0,
            "steps":[
            {
            "step": 1,
            "text": "examplestep1"
            },
            {
            "step": 2,
            "text": "examplestep2"
            }
            ],
            "ingredients":[
            {"name": "potato", "description": "new potato", "amount": 5, "unit": "kg"â€¦}
            ],
            "@namespaces":{
            "recipes":{
            "name": "/api/profiles/link-relations/"
            }
            },
            "@controls":{
            "self":{
            "href": "/api/recipes/1/"
            },
            "profile":{
            "href": "/api/profiles/recipes/"
            },
            "collection":{
            "href": "/api/products/"
            },
            "profile:delete":{
            "method": "DELETE",
            "title": "Delete this resource",
            "href": "/api/recipes/1/"
            },
            "profile:edit-recipe":{"method": "PUT", "encoding": "json", "title": "Edit an existing recipe", "schema":{"type": "object",â€¦},
            "storage:recipes-all":{
            "href": "/api/recipes/1/"
            },
            "profile:add-ingredient":{"method": "POST", "encoding": "json", "title": "Add a new ingredient to recipe", "schema":{"type": "object",â€¦},
            "profile:ingredients-all":{
            "method": "GET",
            "title": "Get all ingredients of recipe",
            "href": "/api/recipes/1/ingredients/"
            },
            "profile:add-step":{"method": "POST", "encoding": "json", "title": "Add a new step to recipe", "schema":{"type": "object",â€¦},
            "profile:steps-all":{
            "method": "GET",
            "title": "Get all steps of recipe",
            "href": "/api/recipes/1/steps/"
            }

### Edit Recipe information [PUT]

+ Relation: edit
+ Request (application/json)

    + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "id": "1"
                "name": "chickensoup",
                "description": "nice soup",
                "recipeYield": "9 servings",
                "cookTime": "5 hours",
                "recipeCategory": "soup",
                "author": "Ville",
                "datePublished": "2015-10-23"
            }
        
+ Response 204

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            {
                "resource_url": "/api/recipes/1/",
                "@error": {
                    "@message": "Invalid date format",
                    "@messages": [
                        "Release date must be written in ISO format (YYYY-MM-DD)"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    Trying to edit recipe that does not exist

    + Body
    
            {
                "resource_url": "/api/recipes/2/",
                "@error": {
                    "@message": "Recipe not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
            
        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/recipes/1/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

### Delete Recipe [DELETE]

+ Relation: delete
+ Request

    + Headers
        
            Accept: application/vnd.mason+json
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to delete an recipe that doesn't exist.

    + Body
    
            {
                "resource_url": "/api/recipe/2/",
                "@error": {
                    "@message": "Recipe not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

  

#Group Users

## User collection [/api/users/]

### List All Users [GET]

    Get all users in the database.

+ Relation: collection
+ Request

    + Headers
        
            Accept: application/vnd.mason.jason
        
+ Response 200 (application/vnd.mason+json)

 + Body

            {
            "users":[
            {
                "username": "ville",
                "@controls":{
                "self":{"href": "/api/users/ville/"},
                "profile":{"href": "/api/profiles/users/"}
            }
            },
            {
                "username": "asd",
                "@controls":{
                "self":{"href": "/api/users/asd/"},
                "profile":{"href": "/api/profiles/users/"}
            }
            }
            ],
            "@controls":{
                "profile:users-all":{
                "method": "GET",
                "title": "Get all users",
                "href": "/api/users/"
            },
                "profile:add-user":{"method": "POST", "encoding": "json", "title": "Add a new user", "schema":{"type": "object",â€¦}
            }
            }
            
### Create a New User [POST]

You may create new user using this action.

+ Relation: add-user
+ Request (application/json)


    + Headers

            Accept: application/vnd.mason+json
        
    + Body
    
            {
              "username":"ville"
            }

+ Response 204

    + Headers
    
            Location: /api/users/ville/

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            {
    "resource_url": "/api/users/",
    "@error": {
        "@message": "Missing fields",
        "@messages": [
            "Incomplete request - missing fields"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}


+ Response 409 (application/vnd.mason+json)


    + Body
    
            {
    "resource_url": "/api/users/",
    "@error": {
        "@message": "Duplicate content",
        "@messages": [
            "User already exists"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}


## User [/api/users/{id}]

+ Parameters

    + id (integer) - user's unique id (id)

### User information [GET]

Get the user representation.

+ Relation: self
+ Relation: collection
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body
    
        {
        "username": "ville",
        "@namespaces":{
            "users":{
            "name": "/api/profiles/link-relations/"
        }
        },
        "@controls":{
                "self":{
                    "href": "/api/users/ville/"
            },
            "profile":{
                "href": "/api/profiles/users/"
            },
            "collection":{
                "href": "/api/users/"
            },
            "profile:delete":{
                "method": "DELETE",
                "title": "Delete this resource",
                "href": "/api/users/ville/"
            },
            "profile:edit-user":{"method": "PUT", "encoding": "json", "title": "Edit an existing user", "schema":{"type": "object",â€¦},
            "storage:users-all":{
                "href": "/api/users/ville/"
            },
            "profile:add-shoppinglist":{"method": "POST", "encoding": "json", "title": "Create new shoppinglist", "schema":{"type": "object",â€¦},
            "profile:shoppinglists-all":{
                "method": "GET",
                "title": "Get all shoppinglists of user",
                "href": "/api/users/ville/shoppinglist/"
            }
        }
        }

### Edit User [PUT]

You may create new user using this action.

+ Relation: edit
+ Request (application/json)

 + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "id": "1"
                "name": "ErkkiS",
            }
        
+ Response 204

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            {
                "resource_url": "/api/users/1/",
                "@error": {
                    "@message": "Invalid name format",
                    "@messages": [
                        "Username must not have special characters"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

+ Response 404 (application/vnd.mason+json)

    Trying to edit recipe that does not exist

    + Body
    
            {
                "resource_url": "/api/users/2/",
                "@error": {
                    "@message": "User not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
            
+ Response 409 (application/vnd.mason+json)

    The client is trying to change the users's title to a one that is already in use for the artist.

    + Body
    
            {
                "resource_url": "/api/users/1/",
                "@error": {
                    "@message": "user id in use",
                    "@messages": [
                        "User exists with the same id'"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }
        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            {
                "resource_url": "/api/users/1/",
                "@error": {
                    "@message": "Unsupported media type",
                    "@messages": [
                        "Use JSON"
                    ]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error-profile/"
                    }
                }
            }

### Delete User [DELETE]

+ Relation: delete
+ Request

    + Headers
        
            Accept: application/vnd.mason+json
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to delete a user that doesn't exist.

    + Body
    
            {
                "resource_url": "/api/user/2/",
                "@error": {
                    "@message": "User not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

#Group Shoppinglists

## Shopping list collection [/api/users/{username}/shoppinglist/]

+ Parameters

    + username (string) - unique username of the user

### Get Shopping Lists [GET]

+ Relation: collection
+ Request

    + Headers
        
            Accept: application/vnd.mason+jason
        

+ Response 200 (application/vnd.mason+json)

    + Body

            {
        "shoppinglists":[
        {
            "notes": "waa",
            "@controls":{
            "self":{"href": "/api/users/ville/shoppinglist/1/"},
            "profile":{"href": "/api/profiles/shoppinglists/"}
        }
        }
        ],
        "@controls":{
            "profile:shoppinglists-all":{
                "method": "GET",
                "title": "Get all shoppinglists of user",
                "href": "/api/users/ville/shoppinglist/"
            },
        "profile:add-shoppinglist":{"method": "POST", "encoding": "json", "title": "Create new shoppinglist", "schema":{"type": "object",â€¦}
        }
        }
        
### Create a New Shopping list [POST]

You may create new shoppinglist using this action.

+ Relation: add-shoppinglist
+ Request (application/json)


    + Headers

            Accept: application/vnd.mason+json
        
    + Body
    
            {
  "notes": "example notes"
}

+ Response 204

    + Headers
    
            Location: /api/users/ville/shoppinglist/1/

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
    {
    "resource_url": "/api/users/ville/shoppinglist/",
    "@error": {
        "@message": "Missing fields",
        "@messages": [
            "Incomplete request - missing fields"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}


## Shopping list [/api/users/{username}/shoppinglist/{list_id}/]

+ Parameters

    + username (string) - unique username of the user
    + list_id (integer) - unique id of the shoppinglist


### Shopping list information [GET]

Get the shoppinglist representation.

+ Relation: self
+ Relation: collection
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body
    
        {
    "notes": "this is shopping list",
    "owner": "ville",
    "ingredients": [
        {
            "name": "potato",
            "description": "new potatoes",
            "amount": 1,
            "unit": "kg"
        },
        {
            "name": "carrot",
            "description": "w",
            "amount": 1,
            "unit": "kg"
        }
    ],
    "@namespaces": {
        "shoppinglists": {
            "name": "/api/profiles/link-relations/"
        }
    },
    "@controls": {
        "self": {
            "href": "/api/users/ville/shoppinglist/1/"
        },
        "profile": {
            "href": "/api/profiles/shoppinglists/"
        },
        "collection": {
            "href": "/api/users/ville/shoppinglist/"
        },
        "profile:add-ingredient": {
            "method": "POST",
            "encoding": "json",
            "title": "Add a new ingredient to recipe",
            "schema": {
                "type": "object",
                "required": [
                    "name",
                    "description",
                    "amount",
                    "unit"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the ingredient",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the ingredient",
                        "type": "string"
                    },
                    "amount": {
                        "description": "The amount of foodstuff needed",
                        "type": "integer"
                    },
                    "unit": {
                        "description": "grams, litres etc",
                        "type": "string"
                    }
                }
            },
            "href": "/api/users/ville/shoppinglist/1/ingredients/"
        },
        "profile:ingredients-all": {
            "method": "GET",
            "title": "Get all ingredients of recipe",
            "href": "/api/users/ville/shoppinglist/1/ingredients/"
        },
        "profile:delete": {
            "method": "DELETE",
            "title": "Delete this resource",
            "href": "/api/users/ville/shoppinglist/1/"
        },
        "profile:edit-shoppinglist": {
            "method": "PUT",
            "encoding": "json",
            "title": "Edit an existing shoppinglist",
            "schema": {
                "type": "object",
                "properties": {
                    "notes": {
                        "description": "The shopping list note like foodstuff",
                        "type": "string"
                    }
                }
            },
            "href": "/api/users/ville/shoppinglist/1/"
        },
        "storage:shoppinglists-all": {
            "href": "/api/users/ville/shoppinglist/"
        }
    }
}


### Edit Shoppinglist [PUT]

You may create new user using this action.

+ Relation: edit
+ Request (application/json)

 + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "notes": "asd"
            }
        
+ Response 204

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            {
        "resource_url": "/api/users/ville/shoppinglist/1/",
        "@error": {
            "@message": "Missing fields",
            "@messages": [
                "Incomplete request - missing fields"
            ]
        },
        "@controls": {
            "profile": {
                "href": "/api/profiles/errors/"
            }
        }
}


+ Response 404 (application/vnd.mason+json)

    Trying to edit shoppinglist that does not exist

    + Body
    
            {
        "resource_url": "/api/users/ville/shoppinglist/5/",
        "@error":{
        "@message": "Not found",
        "@messages":[
        "User ville has no shoppinglist with id 5"
        ]
        },
        "@controls":{
        "profile":{
        "href": "/api/profiles/errors/"
        }
        }
}
        
        

### Delete Shoppinglist [DELETE]

+ Relation: delete
+ Request

    + Headers
        
            Accept: application/vnd.mason+json
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to delete a shoppinglist that doesn't exist.

    + Body
    
            {
    "resource_url": "/api/users/ville/shoppinglist/5/",
    "@error": {
        "@message": "Not found",
        "@messages": [
            "User ville has no shoppinglist with id 5"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}

#Group Steps

## Steps collection [/api/recipes/{recipe_id}/steps/]

+ Parameters

    + recipe_id (integer) - unique id of the recipe

### Get Shopping Lists [GET]

+ Relation: collection
+ Request

    + Headers
        
            Accept: application/vnd.mason+jason
        

+ Response 200 (application/vnd.mason+json)

    + Body

        {
    "steps": [
        {
            "step": 1,
            "text": "Examplestep1",
            "@controls": {
                "self": {
                    "href": "/api/recipes/1/steps/1/"
                },
                "profile": {
                    "href": "/api/profiles/steps/"
                }
            }
        },
        {
            "step": 2,
            "text": "Examplestep2",
            "@controls": {
                "self": {
                    "href": "/api/recipes/1/steps/3/"
                },
                "profile": {
                    "href": "/api/profiles/steps/"
                }
            }
        },
        {
            "step": 3,
            "text": "Examplestep3",
            "@controls": {
                "self": {
                    "href": "/api/recipes/1/steps/4/"
                },
                "profile": {
                    "href": "/api/profiles/steps/"
                }
            }
        }
    ],
    "@controls": {
        "profile:steps-all": {
            "method": "GET",
            "title": "Get all steps of recipe",
            "href": "/api/recipes/1/steps/"
        },
        "profile:add-step": {
            "method": "POST",
            "encoding": "json",
            "title": "Add a new step to recipe",
            "schema": {
                "type": "object",
                "required": [
                    "step",
                    "text"
                ],
                "properties": {
                    "step": {
                        "description": "The number of the step",
                        "type": "integer"
                    },
                    "text": {
                        "description": "The instruction of the step",
                        "type": "string"
                    }
                }
            },
            "href": "/api/recipes/1/steps/"
        }
    }
}

### Add step to recipe [POST]

You may add steps to recipe with this

+ Relation: add-step
+ Request (application/json)


    + Headers

            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "step": "1"
                "text": "step number 1"
            }

+ Response 204

    + Headers
    
            Location: /api/recipes/1/steps/1/

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            {
    "resource_url": "/api/recipes/1/steps/",
    "@error": {
        "@message": "Missing fields",
        "@messages": [
            "Incomplete request - missing fields"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}


+ Response 404 (application/vnd.mason+json)


    + Body
    
           {
    "resource_url": "/api/recipes/11/steps/",
    "@error": {
        "@message": "Missing fields",
        "@messages": [
            "Incomplete request - missing fields"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}

+ Response 409 (application/vnd.mason+json)


    + Body
    
            {
    "resource_url": "/api/recipes/1/steps/",
    "@error": {
        "@message": "Duplicate content",
        "@messages": [
            "Step already exists"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}

        

## Step [/api/recipes/{recipe_id}/steps/{step_id}/]

+ Parameters

    + recipe_id (integer) - unique id of the recipe
    + step_id (integer) - unique number of the step


### Step information [GET]

Get the shoppinglist representation.

+ Relation: self
+ Relation: collection
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    + Body
    
    {
    "recipe_id": 1,
    "step": 1,
    "text": "Examplestep1",
    "@namespaces": {
        "recipe_steps": {
            "name": "/api/profiles/link-relations/"
        }
    },
    "@controls": {
        "self": {
            "href": "/api/recipes/1/steps/1/"
        },
        "profile": {
            "href": "/api/profiles/steps/"
        },
        "collection": {
            "href": "/api/recipes/1/steps/"
        },
        "profile:delete": {
            "method": "DELETE",
            "title": "Delete this resource",
            "href": "/api/recipes/1/steps/1/"
        },
        "profile:edit-step": {
            "method": "PUT",
            "encoding": "json",
            "title": "Edit an existing step",
            "schema": {
                "type": "object",
                "required": [
                    "step",
                    "text"
                ],
                "properties": {
                    "step": {
                        "description": "The number of the step",
                        "type": "integer"
                    },
                    "text": {
                        "description": "The instruction of the step",
                        "type": "string"
                    }
                }
            },
            "href": "/api/recipes/1/steps/1/"
        },
        "storage:recipe_steps-all": {
            "href": "/api/recipes/1/steps/"
        }
    }
}

+ Response 404 (application/vnd.mason+json)

        + Body
            {
        "resource_url": "/api/recipes/11/steps/11/",
        "@error": {
            "@message": "Not Found",
            "@messages": [
                "No user was found with the username 11"
            ]
        },
        "@controls": {
            "profile": {
                "href": "/api/profiles/errors/"
            }
        }
    }


### Edit Step [PUT]

You may create new user using this action.

+ Relation: edit
+ Request (application/json)

 + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "step":1,
                "text": "Testedit"
            }
        
+ Response 204

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
        {
    "resource_url": "/api/recipes/1/steps/1/",
    "@error": {
        "@message": "Missing fields",
        "@messages": [
            "Incomplete request - missing fields"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}



+ Response 404 (application/vnd.mason+json)

    Trying to edit step that does not exist

    + Body
    
{
    "resource_url": "/api/recipes/1/steps/11/",
    "@error": {
        "@message": "Not found",
        "@messages": [
            "No recipe was found with the name 1"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}

        
        

### Delete Step [DELETE]

+ Relation: delete
+ Request

    + Headers
        
            Accept: application/vnd.mason+json
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    Trying to delete step that does not exist


    + Body
    
   {
    "resource_url": "/api/recipes/1/steps/11/",
    "@error": {
        "@message": "Not found",
        "@messages": [
            "No recipe was found with the name 1"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
} 


#Group Recipe ingredient

## Recipe ingredient collection [/api/recipes/{recipe_id}/ingredients/]

+ Parameters

    + recipe_id (integer) - unique id of the recipe

### Get Recipe ingredients [GET]

+ Relation: collection
+ Request

    + Headers
        
            Accept: application/vnd.mason+jason
        

+ Response 200 (application/vnd.mason+json)

    + Body

        {
    "ingredients": [
        {
            "name": "potato",
            "description": "new potatoes",
            "amount": 1,
            "unit": "kg",
            "@controls": {
                "self": {
                    "href": "/api/recipes/1/ingredients/1/"
                },
                "profile": {
                    "href": "/api/profiles/ingredients/"
                }
            }
        }
    ],
    "@controls": {
        "profile:ingredients-all": {
            "method": "GET",
            "title": "Get all ingredients of recipe",
            "href": "/api/recipes/1/ingredients/"
        },
        "profile:add-ingredient": {
            "method": "POST",
            "encoding": "json",
            "title": "Add a new ingredient to recipe",
            "schema": {
                "type": "object",
                "required": [
                    "name",
                    "description",
                    "amount",
                    "unit"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the ingredient",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the ingredient",
                        "type": "string"
                    },
                    "amount": {
                        "description": "The amount of foodstuff needed",
                        "type": "integer"
                    },
                    "unit": {
                        "description": "grams, litres etc",
                        "type": "string"
                    }
                }
            },
            "href": "/api/recipes/1/ingredients/"
        }
    }
}

+ Response 404 (application/vnd.mason+json)


    + Body
    
        {
    "resource_url": "/api/recipes/11/ingredients/",
    "@error": {
        "@message": "Not found",
        "@messages": [
            "No recipe was found with id 11"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}

### Add a new Ingredient to a recipe [POST]

You may add ingredient to recipe using this action.

+ Relation: add-ingredient
+ Request (application/json)


    + Headers

            Accept: application/vnd.mason+json
        
    + Body
    
{
      "name": "wuuuuuu",
      "description": "hoii",
      "amount": "1",
      "unit": "kg",
      "servingsize": "5",
      "servingsizeunit": "kg",
      "calories":"111",
      "carbohydratecontent":"22",
      "unsaturatedfatcontent":"973370"
}

+ Response 204

    + Headers
    
            Location: /api/recipes/1/ingredients/1/

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            {
    "resource_url": "/api/recipes/1/ingredients/",
    "@error": {
        "@message": "Missing fields",
        "@messages": [
            "Incomplete request - missing fields"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}


+ Response 404 (application/vnd.mason+json)


    + Body
    
           {
    "resource_url": "/api/recipes/11/ingredients/",
    "@error": {
        "@message": "Not found",
        "@messages": [
            "No recipe was found with id 11"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}




## Recipe ingredient [/api/recipes/{recipe_id}/ingredients/{ingredient_id}/]

+ Parameters

    + recipe_id (integer) - unique id of the recipe
    + ingredient_id (integer) - unique id of the ingredient


### Recipe ingredient information [GET]

Get the shoppinglist representation.

+ Relation: self
+ Relation: collection
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    + Body
    
    {
    "name": "potato",
    "description": "new potatoes",
    "amount": 1,
    "unit": "kg",
    "calories": null,
    "carbohydrateContent": null,
    "cholesterolContent": null,
    "fatContent": null,
    "fiberContent": null,
    "proteinContent": null,
    "saturatedFatContent": null,
    "sodiumContent": null,
    "sugarContent": null,
    "transFatContent": null,
    "unsaturatedFatContent": null,
    "@namespaces": {
        "recipe_ingredients": {
            "name": "/api/profiles/link-relations/"
        }
    },
    "@controls": {
        "self": {
            "href": "/api/recipes/1/ingredients/1/"
        },
        "profile": {
            "href": "/api/profiles/ingredients/"
        },
        "collection": {
            "href": "/api/recipes/1/ingredients/"
        },
        "profile:delete": {
            "method": "DELETE",
            "title": "Delete this resource",
            "href": "/api/recipes/1/ingredients/1/"
        },
        "profile:edit-ingredient": {
            "method": "PUT",
            "encoding": "json",
            "title": "Edit an existing ingredient",
            "schema": {
                "type": "object",
                "required": [
                    "name",
                    "description",
                    "amount",
                    "unit"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the ingredient",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the ingredient",
                        "type": "string"
                    },
                    "amount": {
                        "description": "The amount of foodstuff needed",
                        "type": "integer"
                    },
                    "unit": {
                        "description": "grams, litres etc",
                        "type": "string"
                    }
                }
            },
            "href": "/api/recipes/1/ingredients/1/"
        }
    }
}


+ Response 404 (application/vnd.mason+json)

        + Body
           {
    "resource_url": "/api/recipes/1/ingredients/11/",
    "@error": {
        "@message": "Not Found",
        "@messages": [
            "No ingredient was found with id 11"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}



### Edit Recipe ingredient [PUT]

You may create new user using this action.

+ Relation: edit
+ Request (application/json)

 + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                  "name": "potato",
                  "description": "hoii",
                  "amount": "4",
                  "unit": "kg",
                  "servingsize": "5",
                  "servingsizeunit": "kg",
                  "calories":"111",
                  "carbohydratecontent":"22",
                  "unsaturatedfatcontent":"973370"
            }
        
+ Response 204

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
       {
    "resource_url": "/api/recipes/1/ingredients/1/",
    "@error": {
        "@message": "Missing fields",
        "@messages": [
            "Incomplete request - missing fields"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}




+ Response 404 (application/vnd.mason+json)

    Trying to edit step that does not exist

    + Body
    
{
    "resource_url": "/api/recipes/1/ingredients/11/",
    "@error": {
        "@message": "Not Found",
        "@messages": [
            "No ingredient was found with id 11"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}


        
        

### Delete Recipe ingredient [DELETE]

+ Relation: delete
+ Request

    + Headers
        
            Accept: application/vnd.mason+json
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    Trying to delete step that does not exist


    + Body
    
 {
    "resource_url": "/api/recipes/1/ingredients/11/",
    "@error": {
        "@message": "Not Found",
        "@messages": [
            "No ingredient was found with id 11"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}

#Group Shopping list ingredient

## Shopping list ingredient collection [/api/users/{username}/shoppinglist/{list_id}/ingredients/]

+ Parameters

    + username (string) - unique username of user
    + list_id (integer) - unique id of the shoppinglist

### Get Recipe ingredients [GET]

+ Relation: collection
+ Request

    + Headers
        
            Accept: application/vnd.mason+jason
        

+ Response 200 (application/vnd.mason+json)

    + Body

        {
    "ingredients": [
        {
            "name": "potato",
            "description": "new potatoes",
            "amount": 1,
            "unit": "kg",
            "@controls": {
                "self": {
                    "href": "/api/recipes/1/ingredients/1/"
                },
                "profile": {
                    "href": "/api/profiles/ingredients/"
                }
            }
        }
    ],
    "@controls": {
        "profile:ingredients-all": {
            "method": "GET",
            "title": "Get all ingredients of recipe",
            "href": "/api/recipes/1/ingredients/"
        },
        "profile:add-ingredient": {
            "method": "POST",
            "encoding": "json",
            "title": "Add a new ingredient to recipe",
            "schema": {
                "type": "object",
                "required": [
                    "name",
                    "description",
                    "amount",
                    "unit"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the ingredient",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the ingredient",
                        "type": "string"
                    },
                    "amount": {
                        "description": "The amount of foodstuff needed",
                        "type": "integer"
                    },
                    "unit": {
                        "description": "grams, litres etc",
                        "type": "string"
                    }
                }
            },
            "href": "/api/recipes/1/ingredients/"
        }
    }
}

+ Response 404 (application/vnd.mason+json)


    + Body
    
        {
    "resource_url": "/api/recipes/11/ingredients/",
    "@error": {
        "@message": "Not found",
        "@messages": [
            "No recipe was found with id 11"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}

### Add a new Ingredient to a shoppinglist [POST]

You may add ingredients to recipe using this action.

+ Relation: add-ingredient
+ Request (application/json)


    + Headers

            Accept: application/vnd.mason+json
        
    + Body
    
{
      "name": "wuuuuuu",
      "description": "hoii",
      "amount": "1",
      "unit": "kg",
      "servingsize": "5",
      "servingsizeunit": "kg",
      "calories":"111",
      "carbohydratecontent":"22",
      "unsaturatedfatcontent":"973370"
}

+ Response 204

    + Headers
    
            Location: /api/users/ville/shoppinglist/1/ingredients/1/

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
{
    "resource_url": "/api/users/ville/shoppinglist/1/ingredients/",
    "@error": {
        "@message": "Missing fields",
        "@messages": [
            "Incomplete request - missing fields"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}



+ Response 404 (application/vnd.mason+json)


    + Body
    
{
    "resource_url": "/api/users/ville/shoppinglist/11/ingredients/",
    "@error": {
        "@message": "Not Found",
        "@messages": [
            "No shopping list with id 11 was found with the username ville"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}




## Recipe ingredient [/api/users/{username}/shoppinglist/{list_id}/ingredients/{ingredient_id}/]

+ Parameters
    
    + username (string) - unique username of user
    + list_id (integer) - list id of the recipe
    + ingredient_id (integer) - unique id of the ingredient


### Recipe ingredient information [GET]

Get the shoppinglist representation.

+ Relation: self
+ Relation: collection
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    + Body
    
    {
    "name": "wuuuuuu",
    "description": "hoii",
    "amount": 1,
    "unit": "kakka",
    "calories": 111,
    "carbohydrateContent": 22,
    "cholesterolContent": null,
    "fatContent": null,
    "fiberContent": null,
    "proteinContent": null,
    "saturatedFatContent": null,
    "sodiumContent": null,
    "sugarContent": null,
    "transFatContent": null,
    "unsaturatedFatContent": 973370,
    "@namespaces": {
        "list_ingredients": {
            "name": "/api/profiles/link-relations/"
        }
    },
    "@controls": {
        "self": {
            "href": "/api/users/ville/shoppinglist/1/ingredients/2/"
        },
        "profile": {
            "href": "/api/profiles/ingredients/"
        },
        "collection": {
            "href": "/api/users/ville/shoppinglist/1/ingredients/"
        },
        "profile:delete": {
            "method": "DELETE",
            "title": "Delete this resource",
            "href": "/api/users/ville/shoppinglist/1/ingredients/2/"
        },
        "profile:edit-ingredient": {
            "method": "PUT",
            "encoding": "json",
            "title": "Edit an existing ingredient",
            "schema": {
                "type": "object",
                "required": [
                    "name",
                    "description",
                    "amount",
                    "unit"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the ingredient",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the ingredient",
                        "type": "string"
                    },
                    "amount": {
                        "description": "The amount of foodstuff needed",
                        "type": "integer"
                    },
                    "unit": {
                        "description": "grams, litres etc",
                        "type": "string"
                    }
                }
            },
            "href": "/api/users/ville/shoppinglist/1/ingredients/2/"
        },
        "storage:recipe_ingredients-all": {
            "href": "/api/users/ville/shoppinglist/1/ingredients/"
        }
    }
}



+ Response 404 (application/vnd.mason+json)

        + Body
{
    "resource_url": "/api/users/ville/shoppinglist/1/ingredients/21/",
    "@error": {
        "@message": "Not Found",
        "@messages": [
            "No ingredient was found with id 21"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}



### Edit Recipe ingredient [PUT]

You may create new user using this action.

+ Relation: edit
+ Request (application/json)

 + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                  "name": "potato",
                  "description": "hoii",
                  "amount": "4",
                  "unit": "kg",
                  "servingsize": "5",
                  "servingsizeunit": "kg",
                  "calories":"111",
                  "carbohydratecontent":"22",
                  "unsaturatedfatcontent":"973370"
            }
        
+ Response 204

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
{
    "resource_url": "/api/users/ville/shoppinglist/1/ingredients/2/",
    "@error": {
        "@message": "Missing fields",
        "@messages": [
            "Incomplete request - missing fields"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}





+ Response 404 (application/vnd.mason+json)

    Trying to edit step that does not exist

    + Body
    
{
    "resource_url": "/api/users/ville/shoppinglist/1/ingredients/21/",
    "@error": {
        "@message": "Not Found",
        "@messages": [
            "No user was found with the username None"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}



        
        

### Delete Recipe ingredient [DELETE]

+ Relation: delete
+ Request

    + Headers
        
            Accept: application/vnd.mason+json
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    Trying to delete step that does not exist


    + Body
    
{
    "resource_url": "/api/users/ville/shoppinglist/1/ingredients/21/",
    "@error": {
        "@message": "Not Found",
        "@messages": [
            "No user was found with the username None"
        ]
    },
    "@controls": {
        "profile": {
            "href": "/api/profiles/errors/"
        }
    }
}
